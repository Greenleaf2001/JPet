# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: jpet-build

on:
  push:
    tags: '*'

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Setup Nodejs
      uses: actions/setup-node@v4.0.3

    - name: Build Frontend
      run: cd ${{github.workspace}}\resources\panel && npm install && npm run build

    - name: Vcpkg Build
      id: vcpkg
      uses: johnwason/vcpkg-action@v6
      with:
        manifest-dir: ${{ github.workspace }}
        triplet: x64-windows-release
        token: ${{ github.token }}
        github-binarycache: true

    - name: Build For Release
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -DJVERSION="${{ github.ref_name }}" -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        cmake --build ${{github.workspace}}/build --config Release --target ALL_BUILD

    - name: Update Version in iss 
      run: |
          $issPath = "${{ github.workspace }}/build-scripts/jpet_setup.iss"
          $pattern = '#define MyAppVersion "[^"]*"'
          $replacement = '#define MyAppVersion "${{ github.ref_name }}"'
          (Get-Content $issPath) -replace $pattern, $replacement | Set-Content $issPath

    - name: Pack with Inno Setup
      uses: Minionguyjpro/Inno-Setup-Action@v1.2.4
      with:
        # Path to input .iss script file
        path: build-scripts/jpet_setup.iss

    - name: Prepare files
      run: |
        cp ${{github.workspace}}/dll/* ${{github.workspace}}/build/bin/JPet/Release/
              
    - name: Upload a Release Zip
      uses: actions/upload-artifact@v4.3.6
      with:
        # Artifact name
        name: jpet-${{ github.ref_name }}
        # A file, directory or wildcard pattern that describes what to upload
        path: |
          ${{github.workspace}}/build/bin/JPet/Release/*
          !${{github.workspace}}/build/bin/JPet/Release/*.pdb

    - name: Upload a Release Installer
      uses: actions/upload-artifact@v4.3.6
      with:
        # Artifact name
        name: jpet-setup-${{ github.ref_name }}
        # A file, directory or wildcard pattern that describes what to upload
        path: ${{github.workspace}}/build-scripts/Output/JPetSetup.exe
          
    - name: Upload DebugInfo
      uses: actions/upload-artifact@v4.3.6
      with:
        # Artifact name
        name: jpet-debuginfo-${{ github.ref_name }}
        # A file, directory or wildcard pattern that describes what to upload
        path: ${{github.workspace}}/build/bin/JPet/Release/JPet.pdb
